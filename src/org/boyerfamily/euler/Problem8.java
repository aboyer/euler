package org.boyerfamily.euler;

/**
 * Project Euler, Problem 8:
 *  Find the greatest product of 13 consecutive digits in the 1000-digit number.

 Test number : "7316717653133"=1764

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

 * Created by : aboyer (5/1/12 11:36 PM)
 */
public class Problem8 {
    public static final String NUMBER =
            "73167176531330624919225119674426574742355349194934" +
            "96983520312774506326239578318016984801869478851843" +
            "85861560789112949495459501737958331952853208805511" +
            "12540698747158523863050715693290963295227443043557" +
            "66896648950445244523161731856403098711121722383113" +
            "62229893423380308135336276614282806444486645238749" +
            "30358907296290491560440772390713810515859307960866" +
            "70172427121883998797908792274921901699720888093776" +
            "65727333001053367881220235421809751254540594752243" +
            "52584907711670556013604839586446706324415722155397" +
            "53697817977846174064955149290862569321978468622482" +
            "83972241375657056057490261407972968652414535100474" +
            "82166370484403199890008895243450658541227588666881" +
            "16427171479924442928230863465674813919123162824586" +
            "17866458359124566529476545682848912883142607690042" +
            "24219022671055626321111109370544217506941658960408" +
            "07198403850962455444362981230987879927244284909188" +
            "84580156166097919133875499200524063689912560717606" +
            "05886116467109405077541002256983155200055935729725" +
            "71636269561882670428252483600823257530420752963450";
    public static final int DIGIT_COUNT = 13;

    public static void main(String[] args) {
        long product = productAt(0);
        long max = product;
        int maxStart=0;

        for (int i=1; i<=NUMBER.length()-DIGIT_COUNT; i++) {
            product = productAt(i);

//            System.out.printf("Checking at %d, sum %d, digits (%s)\n",i, product, NUMBER.substring(i,i+DIGIT_COUNT));

            if (product > max) {
//                System.out.printf("Found new max %d, starting at %d, digits (%s)\n",product,i,NUMBER.substring(i,i+DIGIT_COUNT));
                max = product;
                maxStart = i;
            }
        }

        System.out.printf("Found max product %d, starting at index %d, digits (%s)\n",max,maxStart,NUMBER.substring(maxStart,maxStart+DIGIT_COUNT));
    }

    static long productAt(int index) {
        long product = 1;
        for (int i=0; i<DIGIT_COUNT; i++) {
            product *= numberAt(index+i);
        }
        return product;
    }

    static int numberAt(int index) {
        return charToInt(NUMBER.charAt(index));
    }

    static int charToInt(char c) {
        if (c<'0' || c>'9')
            throw new IllegalArgumentException("bad digit");

        return c-48;
    }
}
