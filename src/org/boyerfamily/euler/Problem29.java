package org.boyerfamily.euler;

import java.math.BigInteger;
import java.util.Set;
import java.util.TreeSet;

import static java.math.BigInteger.ONE;

/**
 * Project Euler, Problem 29
 *
 * Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
 *
 * 22=4, 23=8, 24=16, 25=32
 * 32=9, 33=27, 34=81, 35=243
 * 42=16, 43=64, 44=256, 45=1024
 * 52=25, 53=125, 54=625, 55=3125
 * If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
 *
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 *
 * How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
 *
 */
public class Problem29 {
    private static final Set<BigInteger> terms = new TreeSet<>();
    private static final BigInteger LIMIT = new BigInteger("5");

    public static void main(String[] args) {
        for (BigInteger factor = new BigInteger("2"); factor.compareTo(LIMIT) <= 0; factor = factor.add(ONE)) {
            BigInteger answer = new BigInteger(factor.toString());

            for (BigInteger exponent = new BigInteger("2"); exponent.compareTo(LIMIT) <= 0; exponent = exponent.add(ONE)) {
                answer = answer.multiply(factor);
                if (!terms.contains(answer)) {
                    System.out.printf("Found new term: %s (%d^%d)\n", answer, factor, exponent);
                    terms.add(answer);
                }
            }
        }

        System.out.printf("Found %d terms.\n", terms.size());
    }
}
