package org.boyerfamily.euler;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.TreeSet;

/**
 * Project Euler, Problem 12:
 *   The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 *   1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 *   Let us list the factors of the first seven triangle numbers:

  1: 1
  3: 1,3
  6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28
 We can see that 28 is the first triangle number to have over five divisors.

 25200: 90 divisors

 What is the value of the first triangle number to have over five hundred divisors?
 *
 * Created by : aboyer (5/7/12 7:19 PM)
 */
public class Problem12 {
    static private long addend = 1;
    static HashMap<Long,TreeSet<Long>> divisorsList = new HashMap<Long, TreeSet<Long>>();

    public static void main(String[] args) {
        long startTime=System.nanoTime();
        long num = 0;
        TreeSet<Long> divisors = new TreeSet<Long>();

         while (divisors.size() < 499) {
            num = nextTriangleNumber(num);
            divisors = getDivisors(num);
//             System.out.printf("There are %d divisors for %d\n", divisors.size(), num);
        }

        System.out.printf("There are %d divisors for %d\n", divisors.size(), num);
        long elapsedTime = System.nanoTime() - startTime;
        System.out.printf("Elapsed Time: %,d milliseconds \n", elapsedTime / 1000000);

    }

    static long nextTriangleNumber(long prevNum) {
        return prevNum + addend++;
    }

    static TreeSet<Long> getDivisors(long dividend) {
        TreeSet<Long> ret = new TreeSet<Long>();

        for (long divisor=1; divisor<=dividend/divisor; divisor++) {
//            System.out.printf("%d / %d = %d\n",dividend,divisor,dividend/divisor);
            if (dividend % divisor == 0) {
                ret.add(divisor);
                ret.add(dividend/divisor);
            }
        }

//        if (!divisorsList.containsKey(ret.last()))
//            divisorsList.put(ret.last(),ret);

//        System.out.printf("Divisors for %d: ", dividend);
//        for (Long l : ret) {
//            System.out.print(l + " ");
//        }
//        System.out.println();

        return ret;
    }
}
